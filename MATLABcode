% shooting_method.m
% Author: Kyle Holt


%K_11(i) = z(i);
%K_21(i) = z(i) + (0.5 * h * K_12(i));
%K_31(i) = z(i) + (0.5 * h * K_22(i));
%K_41(i) = z(i) + (h * K_32(i));

%K_12(i) = 4*(T_start(i) - T_amb);
%K_22(i) = 4*(T_start(i) + (0.5 * h * K_11(i)) - T_amb);
%K_32(i) = 4*(T_start(i) + (0.5 * h * K_21(i)) - T_amb);
%K_42(i) = 4*(T_start(i) + (h * K_31(i)) - T_amb);



clear
clc
clear all

% declares known values
T_start(1) = 600;
T_end = 350;
T_amb = 300;
steps = 50;
h = 2/steps;
guess = [-125 -400];

% first guess
z(steps*0+1) = guess(1);
x(steps*0+1) = 0;

for i= 1:steps;
    
    % initializes boundry array
    boundry = [T_start(i), T_end, T_amb, h];
    
    % calculates k values
    K_11(i) = equation_1(x,h,z(i),0);
    
    K_12(i) = equation_2(x, h, z(i), 0, boundry);
    
    K_21(i) = equation_1(x, h, z(i),(0.5 * h * K_12(i)));
    
    K_22(i) = equation_2(x, h, z(i), (0.5 * h * K_11(i)), boundry);
    
    K_31(i) = equation_1(x, h, z(i),(0.5 * h * K_22(i)));
    
    K_32(i) = equation_2(x, h, z(i), (0.5 * h * K_21(i)), boundry);
    
    K_41(i) = equation_1(x, h, z(i),(h * K_32(i)));
    
    K_42(i) = equation_2(x, h, z(i), (h * K_31(i)), boundry);
    
    % calculates final T and z estimate based on k values
    T_final(i) = T_start(i) + (h/6 * (K_11(i) + 2*K_21(i) + 2*K_31(i) + K_41(i)));
    
    z_final(i) = z(i) + (h/6 * (K_12(i) + 2*K_22(i) + 2*K_32(i) + K_42(i)));
    
    % saves T and z values to be used for the next iteration
    T_start(i+1)=T_final(i);
    z(i+1)=z_final(i);
    
end

% reinitializes T
T_start(steps+1) = 600;

% second guess
z(steps+1)= -400;
x(steps+1) = 0;

for i= steps+1:steps*2;
    
    % initializes boundry array
    boundry = [T_start(i), T_end, T_amb, h];
    
    % calculates k values
    K_11(i) = equation_1(x,h,z(i),0);
    
    K_12(i) = equation_2(x, h, z(i), 0, boundry);
    
    K_21(i) = equation_1(x, h, z(i),(0.5 * h * K_12(i)));
    
    K_22(i) = equation_2(x, h, z(i), (0.5 * h * K_11(i)), boundry);
    
    K_31(i) = equation_1(x, h, z(i),(0.5 * h * K_22(i)));
    
    K_32(i) = equation_2(x, h, z(i), (0.5 * h * K_21(i)), boundry);
    
    K_41(i) = equation_1(x, h, z(i),(h * K_32(i)));
    
    K_42(i) = equation_2(x, h, z(i), (h * K_31(i)), boundry);
    
    % calculates final T and z estimate based on k values
    T_final(i) = T_start(i) + (h/6 * (K_11(i) + 2*K_21(i) + 2*K_31(i) + K_41(i)));
    
    z_final(i) = z(i) + (h/6 * (K_12(i) + 2*K_22(i) + 2*K_32(i) + K_42(i)));
    
    % saves T and z values to be used for the next iteration
    T_start(i+1)=T_final(i);
    z(i+1)=z_final(i);
    
end

% reinitializes T
T_start(steps*2+1) = 600;

% second guess
z(steps*2+1)= z(steps+1) + ((z(1)-z(steps+1)) / (T_final(steps)-T_final(steps*2)) * (T_end - T_final(steps*2)));
x(steps*2+1) = 0;

for i= steps*2+1:steps*3;
    
    % initializes boundry array
    boundry = [T_start(i), T_end, T_amb, h];
    
    % calculates k values
    K_11(i) = equation_1(x,h,z(i),0);
    
    K_12(i) = equation_2(x, h, z(i), 0, boundry);
    
    K_21(i) = equation_1(x, h, z(i),(0.5 * h * K_12(i)));
    
    K_22(i) = equation_2(x, h, z(i), (0.5 * h * K_11(i)), boundry);
    
    K_31(i) = equation_1(x, h, z(i),(0.5 * h * K_22(i)));
    
    K_32(i) = equation_2(x, h, z(i), (0.5 * h * K_21(i)), boundry);
    
    K_41(i) = equation_1(x, h, z(i),(h * K_32(i)));
    
    K_42(i) = equation_2(x, h, z(i), (h * K_31(i)), boundry);
    
    % calculates final T and z estimate based on k values
    T_final(i) = T_start(i) + (h/6 * (K_11(i) + 2*K_21(i) + 2*K_31(i) + K_41(i)));
    
    z_final(i) = z(i) + (h/6 * (K_12(i) + 2*K_22(i) + 2*K_32(i) + K_42(i)));
    
    % saves T and z values to be used for the next iteration
    T_start(i+1)=T_final(i);
    z(i+1)=z_final(i);
    
    %     x(i) = x(i-1)+ h;
    
end

T_final
z_final
